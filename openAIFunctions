const OpenAI = require('openai'); // To interact with OpenAI

//The functions that openAI has access to
// openAIFunctions.js

const functionDefinitions = [
  {
    name: 'searchTrack',
    description: 'Searches for tracks based on a song title.',
    parameters: {
      type: 'object',
      properties: {
        songTitle: {
          type: 'string',
          description: 'The title of the song to search for.',
        },
        limit: {
          type: 'integer',
          description: 'The number of tracks to return (default is 5).',
          default: 5,
        },
      },
      required: ['songTitle'],
    },
  },
  {
    name: 'getTrackInfo',
    description: 'Retrieves detailed information about a specific track.',
    parameters: {
      type: 'object',
      properties: {
        artist: {
          type: 'string',
          description: 'The name of the artist.',
        },
        songTitle: {
          type: 'string',
          description: 'The title of the song.',
        },
      },
      required: ['artist', 'songTitle'],
    },
  },
  {
    name: 'getRelatedTracks',
    description: "Searches for similar tracks ",
    parameters:{
      type: 'object',
      properties:{
        artist: {
          type: 'string',
          description: 'The name of the artist.',
        },
        songTitle: {
          type: 'string',
          description: 'The title of the song to search for.',
        },
        limit: {
          type: 'integer',
          description: 'The number of tracks to return (default is 5).',
          default: 5,
        },
      },
      required: ['artist', 'songTitle'],
    },
  },
    {
      name: 'getAlbumInfo',
      description: "Search for information about a particular album by an artist",
      parameters:{
        type: 'object',
        properties:{
          artist:{
            type: 'string',
            description: 'The artist of the album.',
          },
          albumTitle:{
            type: 'string',
            description: 'The title of the album.'
          },
        },
        required: ['artist', 'albumTitle'],
    },
  },
  {
    name: 'searchAlbum',
    description: "Search for albums of the title provided",
    parameters:{
      type: 'object',
      properties:{
        albumTitle:{
          type: 'string',
          description: 'The title of the album.'
        },
        limit:{
          type: 'integer',
          description: 'The number of tracks to return (default is 5).',
          default: 5,
        }
      },
      required: [ 'albumTitle'],
  },
},
{
  name: 'getTagsTopTracks',
  description: "Search the top tracks related to a particular mood/genre/tag",
  parameters:{
    type: 'object',
    properties:{
      tag:{
        type: 'string',
        description: 'The tag to related to a track.'
      },
      limit:{
        type: 'integer',
        description: 'The number of tracks to return (default is 5).',
        default: 5,
      }
    },
    required: [ 'tag'],
},
},
{
  name: 'getTagsTopArtists',
  description: "Search the top artists related to a particular mood/genre/tag",
  parameters:{
    type: 'object',
    properties:{
      tag:{
        type: 'string',
        description: 'The tag to related to an artist.'
      },
      limit:{
        type: 'integer',
        description: 'The number of artists to return (default is 5).',
        default: 5,
      }
    },
    required: [ 'tag'],
},
},

];


const OPEN_AI_KEY = ''
const openai = new OpenAI({
    apiKey: OPEN_AI_KEY, 
  });

//Creates new conversation history
conversationHistory = [];

// Function to send user input and conversation history to OpenAI and get the response
const messageGPT = async (userInput, conversationHistory = []) => {
  // Add user input to conversation history
  conversationHistory.push({ role: 'user', content: userInput });

  try {
    const messages = [
      {
        role: 'system',
        content: 'You are Beat Buddy, a music recommender. Guide the user and make playlists based on their inputs and suggestions. Use the available functions to get music data when necessary.',
      },
      ...conversationHistory,
    ];

    // Call the OpenAI API with function definitions
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini', 
      messages: messages,
      functions: functionDefinitions,
      function_call: 'auto', // Let the assistant decide when to call functions
      max_tokens: 250,
      temperature: 0.7,
    });

    // Get the assistant's response
    const responseMessage = completion.choices[0].message;

    // Check if the assistant wants to call a function
    if (responseMessage.function_call) {
      const functionName = responseMessage.function_call.name;
      const functionArgs = JSON.parse(responseMessage.function_call.arguments);

      // Execute the corresponding function from MusicFunctions.js
      let functionResult;
      switch (functionName) {
        case 'searchTrack':
          functionResult = await searchTrack(functionArgs.songTitle, functionArgs.limit || 5);
          break;
        case 'getTrackInfo':
          functionResult = await getTrackInfo(functionArgs.artist, functionArgs.songTitle);
          break;
        case 'getAlbumInfo':
           functionResult = await getAlbumInfo(functionArgs.artist, functionArgs.albumTitle);
          break;
        case 'getRelatedTracks':
          functionResult = await getRelatedTracks(functionArgs.artist, functionArgs.songTitle, functionArgs.limit || 5 );
          break;
        case 'searchAlbum':
          functionResult = await searchAlbum(functionArgs.albumTitle, functionArgs.limit || 5);
          break;
        case 'getTagsTopTracks':
          functionResult = await getTagsTopTracks(functionArgs.tag, functionArgs.limit || 5);
          break;
        case 'getTagsTopArtists':
          functionResult = await getTagsTopArtists(functionArgs.tag, functionArgs.limit || 5);
          break;
        default:
          throw new Error(`Function ${functionName} is not implemented.`);
      }

      // Add the assistant's function call to the conversation history
      conversationHistory.push(responseMessage);

      // Add the function's result to the conversation history
      conversationHistory.push({
        role: 'function',
        name: functionName,
        content: JSON.stringify(functionResult),
      });

      // Call the model again to get the assistant's final response
      const completion2 = await openai.chat.completions.create({
        model: 'gpt-4o-mini', 
        messages: conversationHistory,
        max_tokens: 75,
        temperature: 0.7,
      });

      const finalResponseMessage = completion2.choices[0].message;

      // Add the final response to the conversation history
      conversationHistory.push(finalResponseMessage);

      // Return the assistant's final response
      return {
        response: finalResponseMessage.content,
        conversationHistory,
      };
    } else {
      // No function call; proceed as usual
      conversationHistory.push(responseMessage);

      return {
        response: responseMessage.content,
        conversationHistory,
      };
    }
  } catch (error) {
    console.error('Error communicating with OpenAI:', error.response ? error.response.data : error.message);
    throw new Error('Failed to communicate with OpenAI.');
  }
};

  





const {
  getTrackInfo,
  getRelatedTracks,
  searchTrack,
  getAlbumInfo,
  searchAlbum,
  getTagsTopTracks,
  getTagsTopArtists,
} = require('./MusicFunctions');


    module.exports = {
      messageGPT,
    }

